---
- name: Monitor for and Process Critical Red Hat Insights Events
  hosts: localhost  # Rule processing usually runs locally within the DE
  gather_facts: false

  ############################################################################
  # Sources: Define how EDA receives events
  ############################################################################
  sources:
    - name: Listen for Insights Webhook Notifications
      ansible.eda.webhook:
        host: 0.0.0.0  # Listen on all interfaces within the container/pod
        port: 5000    # IMPORTANT: Match the port exposed/forwarded for EDA listener
                      #            and used in the Insights Webhook URL config.
        # --- Security (Recommended) ---
        # Uncomment and configure if you set a Secret Token in Insights Webhook:
        # token_header: X-Insight-Token # Default header Insights uses
        # token_secret: "{{ vault_insights_webhook_secret }}" # Use Ansible Vault!
  
  ############################################################################
  # Rules: Define conditions and actions based on received events
  ############################################################################
  rules:
    # --- Rule for Critical Vulnerability Events ---
    - name: Process New Critical Vulnerability Finding
      condition: > # Use multi-line condition for readability
        event.payload.bundle == "rhel" and
        event.payload.application == "vulnerability" and
        event.payload.events is defined and
        event.payload.events | length > 0 and
        event.payload.events[0].metadata.severity is defined and
        event.payload.events[0].metadata.severity == "Critical"
        # Add event_type check if needed, e.g.: and event.payload.event_type == "new-recommendation" 
      action:
        # --- Action 1: Debug (RECOMMENDED FIRST STEP!) ---
        # Use debug initially to see the exact structure of the event payload
        debug:
          msg: |
            RECEIVED CRITICAL VULNERABILITY EVENT:
            Timestamp: {{ event.payload.timestamp | default('N/A') }}
            System Display Name: {{ event.payload.context.system.display_name | default('N/A') }}
            CVE: {{ event.payload.events[0].payload.rule_id | default('N/A') }}
            Severity: {{ event.payload.events[0].metadata.severity | default('N/A') }}
            Full Payload: {{ event.payload }}

        # --- Action 2: Trigger Remediation Job (Example) ---
        # Uncomment and configure *after* verifying payload with debug
        # run_job_template:
        #   name: "Remediate Critical CVE"  # Job Template name in your Controller
        #   organization: "Your Org Name"   # Org name in your Controller
        #   job_args:
        #     limit: "{{ event.payload.context.system.display_name | default(omit) }}" # Target the specific host
        #     extra_vars:
        #       # Pass necessary info to your remediation playbook
        #       target_cve: "{{ event.payload.events[0].payload.rule_id | default(omit) }}"
        #       insights_context: "{{ event.payload.context | default(omit) }}"
        #       # Add other vars as needed by your JT

    # --- Rule for Critical Advisor Events ---
    - name: Process New Critical Advisor Finding
      condition: >
        event.payload.bundle == "rhel" and
        event.payload.application == "advisor" and
        event.payload.events is defined and
        event.payload.events | length > 0 and
        event.payload.events[0].metadata.severity is defined and
        event.payload.events[0].metadata.severity == "Critical"
      action:
        # --- Action 1: Debug ---
        debug:
          msg: |
            RECEIVED CRITICAL ADVISOR EVENT:
            Timestamp: {{ event.payload.timestamp | default('N/A') }}
            System Display Name: {{ event.payload.context.system.display_name | default('N/A') }}
            Rule ID: {{ event.payload.events[0].payload.rule_id | default('N/A') }}
            Description: {{ event.payload.events[0].payload.description | default('N/A') }}
            Severity: {{ event.payload.events[0].metadata.severity | default('N/A') }}
            Full Payload: {{ event.payload }}

        # --- Action 2: Create Incident Ticket (Example) ---
        # Uncomment and configure *after* verifying payload with debug
        # run_job_template:
        #   name: "Create ServiceNow Incident for Insights" # JT name in Controller
        #   organization: "Your Org Name"                 # Org name in Controller
        #   job_args:
        #     extra_vars:
        #       # Pass necessary info to your ticketing playbook
        #       affected_host: "{{ event.payload.context.system.display_name | default(omit) }}"
        #       short_description: "Critical Advisor Finding: {{ event.payload.events[0].payload.rule_id | default('Unknown Rule') }}"
        #       long_description: "{{ event.payload.events[0].payload.description | default('N/A') }}"
        #       rule_id: "{{ event.payload.events[0].payload.rule_id | default(omit) }}"
        #       # Add other vars as needed

    # --- Add more rules here for other applications (e.g., Compliance, Policies) ---
    # --- or different severity levels if desired.                          ---
